(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{689:function(t,v,_){"use strict";_.r(v);var e=_(62),s=Object(e.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"axios"}},[t._v("axios")]),t._v(" "),_("p",[t._v("1.从浏览器中创建 XMLHttpRequest")]),t._v(" "),_("p",[t._v("2.支持 Promise API")]),t._v(" "),_("p",[t._v("3.客户端支持防止CSRF")]),t._v(" "),_("p",[t._v("4.提供了一些并发请求的接口（重要，方便了很多的操作）")]),t._v(" "),_("p",[t._v("5.从 node.js 创建 http 请求")]),t._v(" "),_("p",[t._v("6.拦截请求和响应")]),t._v(" "),_("p",[t._v("7.转换请求和响应数据")]),t._v(" "),_("p",[t._v("8.取消请求")]),t._v(" "),_("p",[t._v("9.自动转换JSON数据")]),t._v(" "),_("h2",{attrs:{id:"fetch"}},[t._v("fetch")]),t._v(" "),_("h3",{attrs:{id:"优势"}},[t._v("优势")]),t._v(" "),_("p",[t._v("语法简洁，更加语义化")]),t._v(" "),_("p",[t._v("基于标准 Promise 实现，支持 async/await")]),t._v(" "),_("p",[t._v("同构方便，使用 isomorphic-fetch")]),t._v(" "),_("p",[t._v("更加底层，提供的API丰富（request, response）")]),t._v(" "),_("p",[t._v("脱离了XHR，是ES规范里新的实现方式")]),t._v(" "),_("h3",{attrs:{id:"缺陷"}},[t._v("缺陷")]),t._v(" "),_("p",[t._v("fetch只对网络请求报错，对400，500都当做成功的请求，服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject")]),t._v(" "),_("p",[t._v("fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费")]),t._v(" "),_("p",[t._v("fetch没有办法原生监测请求的进度，而XHR可以")])])}),[],!1,null,null,null);v.default=s.exports}}]);